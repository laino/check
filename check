#!/usr/bin/env bash
set -e

SOURCE=${BASH_SOURCE[0]}
while [ -L "$SOURCE" ]; do
    DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
    SOURCE=$(readlink "$SOURCE")
    [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE
done
DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )

cd ${DIR}

if [ "$1" = "git" ]; then

    exec git ${@:2}

elif [ "$1" = "out" ]; then

    TIME="$(date --rfc-3339=seconds) OUT"

    echo "${TIME}" >> current.txt

    git reset > /dev/null
    git add current.txt
    git commit -m "${TIME}"

elif [ "$1" = "in" ]; then

    TIME="$(date --rfc-3339=seconds) IN"
    
    echo "${TIME}" >> current.txt

    git reset > /dev/null
    git add current.txt
    git commit -m "${TIME}"

elif [ "$1" = "rotate" ]; then

    TODAY_TXT=$(date --rfc-3339=date).txt
    cat current.txt >> ${TODAY_TXT}
    : > current.txt

    git reset > /dev/null
    git add current.txt
    git add ${TODAY_TXT}
    git commit -m "ROTATE"

elif [ "$1" = "sum" ]; then
    
    file="current.txt"

    if [ ! -z "$2" ]; then
        file="$2"
    fi

    cat "${file}" | sort | {
        sum=0
        last=""

        while read line; do
            arr=($line)
            timestamp=$(date --date "${arr[0]} ${arr[1]}" +%s)

            if [ "${arr[2]}" = "${last[2]}" ]; then
                echo "Problem in ${file}:" > /dev/stderr
                echo "> ${last[*]}" > /dev/stderr
                echo "> ${arr[*]}" > /dev/stderr
                exit 1
            fi

            if [ "${arr[2]}" = "IN" ]; then
                let sum=${sum}-${timestamp}
            else
                let sum=${sum}+${timestamp}
            fi

            last=($line)
        done;

        if [ "${last[2]}" = "IN" ]; then
            let sum=${sum}+$(date +%s)
        fi

        let hours=${sum}/60/60
        let minutes=${sum}/60%60
        let seconds=${sum}%60

        echo ${hours}:${minutes}:${seconds}
    }

elif [ "$1" = "list" ]; then

    ls *.txt

elif [ "$1" = "show" ] || [ -z "$1" ]; then

    file="current.txt"

    if [ ! -z "$2" ]; then
        file="$2"
    fi

    (
        echo "MOST RECENT FIRST"
        echo "-----------------"
        echo

        tac ${file}
    ) | less

else

    echo "Unknown argument: $1"
    exit 1

fi
